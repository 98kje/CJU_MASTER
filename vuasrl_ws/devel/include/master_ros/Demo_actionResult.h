// Generated by gencpp from file master_ros/Demo_actionResult.msg
// DO NOT EDIT!


#ifndef MASTER_ROS_MESSAGE_DEMO_ACTIONRESULT_H
#define MASTER_ROS_MESSAGE_DEMO_ACTIONRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace master_ros
{
template <class ContainerAllocator>
struct Demo_actionResult_
{
  typedef Demo_actionResult_<ContainerAllocator> Type;

  Demo_actionResult_()
    : final_count(0)  {
    }
  Demo_actionResult_(const ContainerAllocator& _alloc)
    : final_count(0)  {
  (void)_alloc;
    }



   typedef int32_t _final_count_type;
  _final_count_type final_count;





  typedef boost::shared_ptr< ::master_ros::Demo_actionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::master_ros::Demo_actionResult_<ContainerAllocator> const> ConstPtr;

}; // struct Demo_actionResult_

typedef ::master_ros::Demo_actionResult_<std::allocator<void> > Demo_actionResult;

typedef boost::shared_ptr< ::master_ros::Demo_actionResult > Demo_actionResultPtr;
typedef boost::shared_ptr< ::master_ros::Demo_actionResult const> Demo_actionResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::master_ros::Demo_actionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::master_ros::Demo_actionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::master_ros::Demo_actionResult_<ContainerAllocator1> & lhs, const ::master_ros::Demo_actionResult_<ContainerAllocator2> & rhs)
{
  return lhs.final_count == rhs.final_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::master_ros::Demo_actionResult_<ContainerAllocator1> & lhs, const ::master_ros::Demo_actionResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace master_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::master_ros::Demo_actionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_ros::Demo_actionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_ros::Demo_actionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_ros::Demo_actionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_ros::Demo_actionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_ros::Demo_actionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::master_ros::Demo_actionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eaae876f57686d9f2a92f60bfbd26c85";
  }

  static const char* value(const ::master_ros::Demo_actionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeaae876f57686d9fULL;
  static const uint64_t static_value2 = 0x2a92f60bfbd26c85ULL;
};

template<class ContainerAllocator>
struct DataType< ::master_ros::Demo_actionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_ros/Demo_actionResult";
  }

  static const char* value(const ::master_ros::Demo_actionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::master_ros::Demo_actionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result definition\n"
"int32 final_count\n"
;
  }

  static const char* value(const ::master_ros::Demo_actionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::master_ros::Demo_actionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.final_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Demo_actionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::master_ros::Demo_actionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::master_ros::Demo_actionResult_<ContainerAllocator>& v)
  {
    s << indent << "final_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.final_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASTER_ROS_MESSAGE_DEMO_ACTIONRESULT_H
