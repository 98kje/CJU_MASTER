// Generated by gencpp from file tugcar_msgs/VersionInfo.msg
// DO NOT EDIT!


#ifndef TUGCAR_MSGS_MESSAGE_VERSIONINFO_H
#define TUGCAR_MSGS_MESSAGE_VERSIONINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tugcar_msgs
{
template <class ContainerAllocator>
struct VersionInfo_
{
  typedef VersionInfo_<ContainerAllocator> Type;

  VersionInfo_()
    : hardware()
    , firmware()
    , software()  {
    }
  VersionInfo_(const ContainerAllocator& _alloc)
    : hardware(_alloc)
    , firmware(_alloc)
    , software(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _hardware_type;
  _hardware_type hardware;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _firmware_type;
  _firmware_type firmware;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _software_type;
  _software_type software;





  typedef boost::shared_ptr< ::tugcar_msgs::VersionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tugcar_msgs::VersionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct VersionInfo_

typedef ::tugcar_msgs::VersionInfo_<std::allocator<void> > VersionInfo;

typedef boost::shared_ptr< ::tugcar_msgs::VersionInfo > VersionInfoPtr;
typedef boost::shared_ptr< ::tugcar_msgs::VersionInfo const> VersionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tugcar_msgs::VersionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tugcar_msgs::VersionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tugcar_msgs::VersionInfo_<ContainerAllocator1> & lhs, const ::tugcar_msgs::VersionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.hardware == rhs.hardware &&
    lhs.firmware == rhs.firmware &&
    lhs.software == rhs.software;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tugcar_msgs::VersionInfo_<ContainerAllocator1> & lhs, const ::tugcar_msgs::VersionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tugcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tugcar_msgs::VersionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tugcar_msgs::VersionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tugcar_msgs::VersionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tugcar_msgs::VersionInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugcar_msgs::VersionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugcar_msgs::VersionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tugcar_msgs::VersionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43e0361461af2970a33107409403ef3c";
  }

  static const char* value(const ::tugcar_msgs::VersionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43e0361461af2970ULL;
  static const uint64_t static_value2 = 0xa33107409403ef3cULL;
};

template<class ContainerAllocator>
struct DataType< ::tugcar_msgs::VersionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tugcar_msgs/VersionInfo";
  }

  static const char* value(const ::tugcar_msgs::VersionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tugcar_msgs::VersionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "########################################\n"
"# Messages\n"
"########################################\n"
"string hardware   # <yyyy>.<mm>.<dd>        : hardware version of Turtlebot3 (ex. 2017.05.23)\n"
"string firmware   # <major>.<minor>.<patch> : firmware version of OpenCR\n"
"string software   # <major>.<minor>.<patch> : software version of Turtlebot3 ROS packages\n"
;
  }

  static const char* value(const ::tugcar_msgs::VersionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tugcar_msgs::VersionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hardware);
      stream.next(m.firmware);
      stream.next(m.software);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VersionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tugcar_msgs::VersionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tugcar_msgs::VersionInfo_<ContainerAllocator>& v)
  {
    s << indent << "hardware: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.hardware);
    s << indent << "firmware: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.firmware);
    s << indent << "software: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.software);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUGCAR_MSGS_MESSAGE_VERSIONINFO_H
