// Generated by gencpp from file action_tutorial/MazeGoal.msg
// DO NOT EDIT!


#ifndef ACTION_TUTORIAL_MESSAGE_MAZEGOAL_H
#define ACTION_TUTORIAL_MESSAGE_MAZEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_tutorial
{
template <class ContainerAllocator>
struct MazeGoal_
{
  typedef MazeGoal_<ContainerAllocator> Type;

  MazeGoal_()
    : turning_sequence()  {
    }
  MazeGoal_(const ContainerAllocator& _alloc)
    : turning_sequence(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _turning_sequence_type;
  _turning_sequence_type turning_sequence;





  typedef boost::shared_ptr< ::action_tutorial::MazeGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_tutorial::MazeGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MazeGoal_

typedef ::action_tutorial::MazeGoal_<std::allocator<void> > MazeGoal;

typedef boost::shared_ptr< ::action_tutorial::MazeGoal > MazeGoalPtr;
typedef boost::shared_ptr< ::action_tutorial::MazeGoal const> MazeGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_tutorial::MazeGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_tutorial::MazeGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_tutorial::MazeGoal_<ContainerAllocator1> & lhs, const ::action_tutorial::MazeGoal_<ContainerAllocator2> & rhs)
{
  return lhs.turning_sequence == rhs.turning_sequence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_tutorial::MazeGoal_<ContainerAllocator1> & lhs, const ::action_tutorial::MazeGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_tutorial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::action_tutorial::MazeGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_tutorial::MazeGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_tutorial::MazeGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_tutorial::MazeGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_tutorial::MazeGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_tutorial::MazeGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_tutorial::MazeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f6bba6ab4d87ccf9a2d700e1f5065e6";
  }

  static const char* value(const ::action_tutorial::MazeGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f6bba6ab4d87ccfULL;
  static const uint64_t static_value2 = 0x9a2d700e1f5065e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_tutorial::MazeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_tutorial/MazeGoal";
  }

  static const char* value(const ::action_tutorial::MazeGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_tutorial::MazeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int32[] turning_sequence\n"
;
  }

  static const char* value(const ::action_tutorial::MazeGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_tutorial::MazeGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.turning_sequence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MazeGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_tutorial::MazeGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_tutorial::MazeGoal_<ContainerAllocator>& v)
  {
    s << indent << "turning_sequence[]" << std::endl;
    for (size_t i = 0; i < v.turning_sequence.size(); ++i)
    {
      s << indent << "  turning_sequence[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.turning_sequence[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_TUTORIAL_MESSAGE_MAZEGOAL_H
