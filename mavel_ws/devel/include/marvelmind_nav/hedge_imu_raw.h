// Generated by gencpp from file marvelmind_nav/hedge_imu_raw.msg
// DO NOT EDIT!


#ifndef MARVELMIND_NAV_MESSAGE_HEDGE_IMU_RAW_H
#define MARVELMIND_NAV_MESSAGE_HEDGE_IMU_RAW_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marvelmind_nav
{
template <class ContainerAllocator>
struct hedge_imu_raw_
{
  typedef hedge_imu_raw_<ContainerAllocator> Type;

  hedge_imu_raw_()
    : timestamp_ms(0)
    , acc_x(0)
    , acc_y(0)
    , acc_z(0)
    , gyro_x(0)
    , gyro_y(0)
    , gyro_z(0)
    , compass_x(0)
    , compass_y(0)
    , compass_z(0)  {
    }
  hedge_imu_raw_(const ContainerAllocator& _alloc)
    : timestamp_ms(0)
    , acc_x(0)
    , acc_y(0)
    , acc_z(0)
    , gyro_x(0)
    , gyro_y(0)
    , gyro_z(0)
    , compass_x(0)
    , compass_y(0)
    , compass_z(0)  {
  (void)_alloc;
    }



   typedef int64_t _timestamp_ms_type;
  _timestamp_ms_type timestamp_ms;

   typedef int16_t _acc_x_type;
  _acc_x_type acc_x;

   typedef int16_t _acc_y_type;
  _acc_y_type acc_y;

   typedef int16_t _acc_z_type;
  _acc_z_type acc_z;

   typedef int16_t _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef int16_t _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef int16_t _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef int16_t _compass_x_type;
  _compass_x_type compass_x;

   typedef int16_t _compass_y_type;
  _compass_y_type compass_y;

   typedef int16_t _compass_z_type;
  _compass_z_type compass_z;





  typedef boost::shared_ptr< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> const> ConstPtr;

}; // struct hedge_imu_raw_

typedef ::marvelmind_nav::hedge_imu_raw_<std::allocator<void> > hedge_imu_raw;

typedef boost::shared_ptr< ::marvelmind_nav::hedge_imu_raw > hedge_imu_rawPtr;
typedef boost::shared_ptr< ::marvelmind_nav::hedge_imu_raw const> hedge_imu_rawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator1> & lhs, const ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_ms == rhs.timestamp_ms &&
    lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z &&
    lhs.gyro_x == rhs.gyro_x &&
    lhs.gyro_y == rhs.gyro_y &&
    lhs.gyro_z == rhs.gyro_z &&
    lhs.compass_x == rhs.compass_x &&
    lhs.compass_y == rhs.compass_y &&
    lhs.compass_z == rhs.compass_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator1> & lhs, const ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marvelmind_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "809304d028f09940bd722db544d5d2e8";
  }

  static const char* value(const ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x809304d028f09940ULL;
  static const uint64_t static_value2 = 0xbd722db544d5d2e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marvelmind_nav/hedge_imu_raw";
  }

  static const char* value(const ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 timestamp_ms\n"
"int16 acc_x\n"
"int16 acc_y\n"
"int16 acc_z\n"
"int16 gyro_x\n"
"int16 gyro_y\n"
"int16 gyro_z\n"
"int16 compass_x\n"
"int16 compass_y\n"
"int16 compass_z\n"
;
  }

  static const char* value(const ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_ms);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.compass_x);
      stream.next(m.compass_y);
      stream.next(m.compass_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hedge_imu_raw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marvelmind_nav::hedge_imu_raw_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_ms: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_ms);
    s << indent << "acc_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acc_z);
    s << indent << "gyro_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "compass_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compass_x);
    s << indent << "compass_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compass_y);
    s << indent << "compass_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compass_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARVELMIND_NAV_MESSAGE_HEDGE_IMU_RAW_H
