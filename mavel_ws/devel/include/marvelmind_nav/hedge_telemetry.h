// Generated by gencpp from file marvelmind_nav/hedge_telemetry.msg
// DO NOT EDIT!


#ifndef MARVELMIND_NAV_MESSAGE_HEDGE_TELEMETRY_H
#define MARVELMIND_NAV_MESSAGE_HEDGE_TELEMETRY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marvelmind_nav
{
template <class ContainerAllocator>
struct hedge_telemetry_
{
  typedef hedge_telemetry_<ContainerAllocator> Type;

  hedge_telemetry_()
    : battery_voltage(0.0)
    , rssi_dbm(0)  {
    }
  hedge_telemetry_(const ContainerAllocator& _alloc)
    : battery_voltage(0.0)
    , rssi_dbm(0)  {
  (void)_alloc;
    }



   typedef double _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef int8_t _rssi_dbm_type;
  _rssi_dbm_type rssi_dbm;





  typedef boost::shared_ptr< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> const> ConstPtr;

}; // struct hedge_telemetry_

typedef ::marvelmind_nav::hedge_telemetry_<std::allocator<void> > hedge_telemetry;

typedef boost::shared_ptr< ::marvelmind_nav::hedge_telemetry > hedge_telemetryPtr;
typedef boost::shared_ptr< ::marvelmind_nav::hedge_telemetry const> hedge_telemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marvelmind_nav::hedge_telemetry_<ContainerAllocator1> & lhs, const ::marvelmind_nav::hedge_telemetry_<ContainerAllocator2> & rhs)
{
  return lhs.battery_voltage == rhs.battery_voltage &&
    lhs.rssi_dbm == rhs.rssi_dbm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marvelmind_nav::hedge_telemetry_<ContainerAllocator1> & lhs, const ::marvelmind_nav::hedge_telemetry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marvelmind_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71969b1e6d7b7ffa3f313a22d80cf863";
  }

  static const char* value(const ::marvelmind_nav::hedge_telemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71969b1e6d7b7ffaULL;
  static const uint64_t static_value2 = 0x3f313a22d80cf863ULL;
};

template<class ContainerAllocator>
struct DataType< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marvelmind_nav/hedge_telemetry";
  }

  static const char* value(const ::marvelmind_nav::hedge_telemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 battery_voltage\n"
"int8 rssi_dbm\n"
"\n"
;
  }

  static const char* value(const ::marvelmind_nav::hedge_telemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_voltage);
      stream.next(m.rssi_dbm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hedge_telemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marvelmind_nav::hedge_telemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marvelmind_nav::hedge_telemetry_<ContainerAllocator>& v)
  {
    s << indent << "battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "rssi_dbm: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rssi_dbm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARVELMIND_NAV_MESSAGE_HEDGE_TELEMETRY_H
