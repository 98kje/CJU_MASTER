// Generated by gencpp from file marvelmind_nav/MarvelmindAPIResponse.msg
// DO NOT EDIT!


#ifndef MARVELMIND_NAV_MESSAGE_MARVELMINDAPIRESPONSE_H
#define MARVELMIND_NAV_MESSAGE_MARVELMINDAPIRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marvelmind_nav
{
template <class ContainerAllocator>
struct MarvelmindAPIResponse_
{
  typedef MarvelmindAPIResponse_<ContainerAllocator> Type;

  MarvelmindAPIResponse_()
    : success(false)
    , error_code(0)
    , response()  {
    }
  MarvelmindAPIResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , error_code(0)
    , response(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _response_type;
  _response_type response;





  typedef boost::shared_ptr< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MarvelmindAPIResponse_

typedef ::marvelmind_nav::MarvelmindAPIResponse_<std::allocator<void> > MarvelmindAPIResponse;

typedef boost::shared_ptr< ::marvelmind_nav::MarvelmindAPIResponse > MarvelmindAPIResponsePtr;
typedef boost::shared_ptr< ::marvelmind_nav::MarvelmindAPIResponse const> MarvelmindAPIResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator1> & lhs, const ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.error_code == rhs.error_code &&
    lhs.response == rhs.response;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator1> & lhs, const ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marvelmind_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b797b0e3bd619dc635cc951db4b8ea48";
  }

  static const char* value(const ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb797b0e3bd619dc6ULL;
  static const uint64_t static_value2 = 0x35cc951db4b8ea48ULL;
};

template<class ContainerAllocator>
struct DataType< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marvelmind_nav/MarvelmindAPIResponse";
  }

  static const char* value(const ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Response\n"
"bool success\n"
"int32 error_code\n"
"uint8[] response\n"
"\n"
;
  }

  static const char* value(const ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error_code);
      stream.next(m.response);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MarvelmindAPIResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marvelmind_nav::MarvelmindAPIResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "response[]" << std::endl;
    for (size_t i = 0; i < v.response.size(); ++i)
    {
      s << indent << "  response[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.response[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARVELMIND_NAV_MESSAGE_MARVELMINDAPIRESPONSE_H
