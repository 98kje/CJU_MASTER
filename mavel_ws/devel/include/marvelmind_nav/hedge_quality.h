// Generated by gencpp from file marvelmind_nav/hedge_quality.msg
// DO NOT EDIT!


#ifndef MARVELMIND_NAV_MESSAGE_HEDGE_QUALITY_H
#define MARVELMIND_NAV_MESSAGE_HEDGE_QUALITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marvelmind_nav
{
template <class ContainerAllocator>
struct hedge_quality_
{
  typedef hedge_quality_<ContainerAllocator> Type;

  hedge_quality_()
    : address(0)
    , quality_percents(0)  {
    }
  hedge_quality_(const ContainerAllocator& _alloc)
    : address(0)
    , quality_percents(0)  {
  (void)_alloc;
    }



   typedef uint8_t _address_type;
  _address_type address;

   typedef uint8_t _quality_percents_type;
  _quality_percents_type quality_percents;





  typedef boost::shared_ptr< ::marvelmind_nav::hedge_quality_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marvelmind_nav::hedge_quality_<ContainerAllocator> const> ConstPtr;

}; // struct hedge_quality_

typedef ::marvelmind_nav::hedge_quality_<std::allocator<void> > hedge_quality;

typedef boost::shared_ptr< ::marvelmind_nav::hedge_quality > hedge_qualityPtr;
typedef boost::shared_ptr< ::marvelmind_nav::hedge_quality const> hedge_qualityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marvelmind_nav::hedge_quality_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marvelmind_nav::hedge_quality_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marvelmind_nav::hedge_quality_<ContainerAllocator1> & lhs, const ::marvelmind_nav::hedge_quality_<ContainerAllocator2> & rhs)
{
  return lhs.address == rhs.address &&
    lhs.quality_percents == rhs.quality_percents;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marvelmind_nav::hedge_quality_<ContainerAllocator1> & lhs, const ::marvelmind_nav::hedge_quality_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marvelmind_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marvelmind_nav::hedge_quality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marvelmind_nav::hedge_quality_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind_nav::hedge_quality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvelmind_nav::hedge_quality_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind_nav::hedge_quality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvelmind_nav::hedge_quality_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marvelmind_nav::hedge_quality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32c7aef52b6208c1c5cea12793225e6e";
  }

  static const char* value(const ::marvelmind_nav::hedge_quality_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32c7aef52b6208c1ULL;
  static const uint64_t static_value2 = 0xc5cea12793225e6eULL;
};

template<class ContainerAllocator>
struct DataType< ::marvelmind_nav::hedge_quality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marvelmind_nav/hedge_quality";
  }

  static const char* value(const ::marvelmind_nav::hedge_quality_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marvelmind_nav::hedge_quality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 address\n"
"uint8 quality_percents\n"
;
  }

  static const char* value(const ::marvelmind_nav::hedge_quality_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marvelmind_nav::hedge_quality_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.address);
      stream.next(m.quality_percents);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hedge_quality_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marvelmind_nav::hedge_quality_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marvelmind_nav::hedge_quality_<ContainerAllocator>& v)
  {
    s << indent << "address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.address);
    s << indent << "quality_percents: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality_percents);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARVELMIND_NAV_MESSAGE_HEDGE_QUALITY_H
