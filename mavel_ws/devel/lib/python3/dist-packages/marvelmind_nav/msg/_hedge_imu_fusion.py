# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from marvelmind_nav/hedge_imu_fusion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class hedge_imu_fusion(genpy.Message):
  _md5sum = "80fa4231724bd716826855f463bf5400"
  _type = "marvelmind_nav/hedge_imu_fusion"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 timestamp_ms
float64 x_m
float64 y_m
float64 z_m
float64 qw
float64 qx
float64 qy
float64 qz
float64 vx
float64 vy
float64 vz
float64 ax
float64 ay
float64 az

"""
  __slots__ = ['timestamp_ms','x_m','y_m','z_m','qw','qx','qy','qz','vx','vy','vz','ax','ay','az']
  _slot_types = ['int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_ms,x_m,y_m,z_m,qw,qx,qy,qz,vx,vy,vz,ax,ay,az

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hedge_imu_fusion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp_ms is None:
        self.timestamp_ms = 0
      if self.x_m is None:
        self.x_m = 0.
      if self.y_m is None:
        self.y_m = 0.
      if self.z_m is None:
        self.z_m = 0.
      if self.qw is None:
        self.qw = 0.
      if self.qx is None:
        self.qx = 0.
      if self.qy is None:
        self.qy = 0.
      if self.qz is None:
        self.qz = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
      if self.az is None:
        self.az = 0.
    else:
      self.timestamp_ms = 0
      self.x_m = 0.
      self.y_m = 0.
      self.z_m = 0.
      self.qw = 0.
      self.qx = 0.
      self.qy = 0.
      self.qz = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.ax = 0.
      self.ay = 0.
      self.az = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q13d().pack(_x.timestamp_ms, _x.x_m, _x.y_m, _x.z_m, _x.qw, _x.qx, _x.qy, _x.qz, _x.vx, _x.vy, _x.vz, _x.ax, _x.ay, _x.az))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.timestamp_ms, _x.x_m, _x.y_m, _x.z_m, _x.qw, _x.qx, _x.qy, _x.qz, _x.vx, _x.vy, _x.vz, _x.ax, _x.ay, _x.az,) = _get_struct_q13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q13d().pack(_x.timestamp_ms, _x.x_m, _x.y_m, _x.z_m, _x.qw, _x.qx, _x.qy, _x.qz, _x.vx, _x.vy, _x.vz, _x.ax, _x.ay, _x.az))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.timestamp_ms, _x.x_m, _x.y_m, _x.z_m, _x.qw, _x.qx, _x.qy, _x.qz, _x.vx, _x.vy, _x.vz, _x.ax, _x.ay, _x.az,) = _get_struct_q13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q13d = None
def _get_struct_q13d():
    global _struct_q13d
    if _struct_q13d is None:
        _struct_q13d = struct.Struct("<q13d")
    return _struct_q13d
