# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from marvelmind_nav/hedge_imu_raw.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class hedge_imu_raw(genpy.Message):
  _md5sum = "809304d028f09940bd722db544d5d2e8"
  _type = "marvelmind_nav/hedge_imu_raw"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 timestamp_ms
int16 acc_x
int16 acc_y
int16 acc_z
int16 gyro_x
int16 gyro_y
int16 gyro_z
int16 compass_x
int16 compass_y
int16 compass_z
"""
  __slots__ = ['timestamp_ms','acc_x','acc_y','acc_z','gyro_x','gyro_y','gyro_z','compass_x','compass_y','compass_z']
  _slot_types = ['int64','int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_ms,acc_x,acc_y,acc_z,gyro_x,gyro_y,gyro_z,compass_x,compass_y,compass_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hedge_imu_raw, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp_ms is None:
        self.timestamp_ms = 0
      if self.acc_x is None:
        self.acc_x = 0
      if self.acc_y is None:
        self.acc_y = 0
      if self.acc_z is None:
        self.acc_z = 0
      if self.gyro_x is None:
        self.gyro_x = 0
      if self.gyro_y is None:
        self.gyro_y = 0
      if self.gyro_z is None:
        self.gyro_z = 0
      if self.compass_x is None:
        self.compass_x = 0
      if self.compass_y is None:
        self.compass_y = 0
      if self.compass_z is None:
        self.compass_z = 0
    else:
      self.timestamp_ms = 0
      self.acc_x = 0
      self.acc_y = 0
      self.acc_z = 0
      self.gyro_x = 0
      self.gyro_y = 0
      self.gyro_z = 0
      self.compass_x = 0
      self.compass_y = 0
      self.compass_z = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q9h().pack(_x.timestamp_ms, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.compass_x, _x.compass_y, _x.compass_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.timestamp_ms, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.compass_x, _x.compass_y, _x.compass_z,) = _get_struct_q9h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q9h().pack(_x.timestamp_ms, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.compass_x, _x.compass_y, _x.compass_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.timestamp_ms, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.compass_x, _x.compass_y, _x.compass_z,) = _get_struct_q9h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q9h = None
def _get_struct_q9h():
    global _struct_q9h
    if _struct_q9h is None:
        _struct_q9h = struct.Struct("<q9h")
    return _struct_q9h
